df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z100")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
#
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
head(document)
document$category
document[document$category = "shoplifting"]
document[document$category == "shoplifting"]
document[document$category == "shoplifting",]
head(document[document$category == "shoplifting",])
unique(document$category)
document <- document[document$category == "violent-crime",]
writeOGR(document, "/Users/samcomber/Documents/spatial_analysis/shp/crimes",
"crimes", driver = "ESRI Shapefile")
crimes <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/crimes",
layer = "crimes")
crimes
head(crimes)
# directory loop
folders <- dir("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# we have folders + file names and are in run1 directory
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# create master dataframe to hold correlation coefficents
cors.scale.master <- data.frame()
# loop over aggregation folder - i.e. 10 regions, 20, 30
for (folder in folders) {
setwd(paste0("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1","/",folder))
# reread hex shapefile everytime we move folder
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
out <- data.frame()
files <- list.files(pattern = "*.zon")
# pick first iteration from each scale of aggregation
img <- read.csv(files[1])
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, img, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.scale.master <- rbind(cors.scale.master, cor.tc)
}
cors.scale.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z100")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
#
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
tweets
plot(crimes)
nrow(crimes)
nrow(tweets)
document <- document[sample(nrow(document), 1000)]
document <- document[sample(nrow(document), 1000), ]
twz <- tweets[sample(nrow(tweets), 10)]
twz <- tweets[sample(nrow(tweets), 10), ]
twz
class(twz)
plot(twz)
tweets <- tweets[sample(nrow(tweets), 1000), ]
tweets
nrow(tweets)
nrow(crimes)
document <- document[sample(nrow(document), 1000), ]
nrow(crimes)
writeOGR(document, "/Users/samcomber/Documents/spatial_analysis/shp/crimes",
"crimes", driver = "ESRI Shapefile")
crimes <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/crimes",
layer = "crimes")
# directory loop
folders <- dir("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# we have folders + file names and are in run1 directory
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# create master dataframe to hold correlation coefficents
cors.scale.master <- data.frame()
# loop over aggregation folder - i.e. 10 regions, 20, 30
for (folder in folders) {
setwd(paste0("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1","/",folder))
# reread hex shapefile everytime we move folder
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
out <- data.frame()
files <- list.files(pattern = "*.zon")
# pick first iteration from each scale of aggregation
img <- read.csv(files[1])
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, img, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.scale.master <- rbind(cors.scale.master, cor.tc)
}
cors.scale.master
plot(hex)
plot(crimes, add=T)
plot(tweets, add=T)
tweets <- tweets[sample(nrow(tweets), 500), ]
crimes <- crimes[sample(nrow(crimes), 500), ]
plot(crimes)
# directory loop
folders <- dir("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# we have folders + file names and are in run1 directory
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# create master dataframe to hold correlation coefficents
cors.scale.master <- data.frame()
# loop over aggregation folder - i.e. 10 regions, 20, 30
for (folder in folders) {
setwd(paste0("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1","/",folder))
# reread hex shapefile everytime we move folder
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
out <- data.frame()
files <- list.files(pattern = "*.zon")
# pick first iteration from each scale of aggregation
img <- read.csv(files[1])
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, img, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.scale.master <- rbind(cors.scale.master, cor.tc)
}
cors.scale.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z100")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
#
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
hex@data$id
hex.pts <- fortify(hex, region="id")
hex.df <- join(hex.pts, hex@data, by = "id")
hex.df <- dplyr::join(hex.pts, hex@data, by = "id")
hex.df <- plyr::join(hex.pts, hex@data, by = "id")
str(hex.df)
ggplot(hex.df) + aes(long, lat) + geom_polygon()
ggplot(hex.df) + aes(long, lat) + geom_polygon() + geom_path(color="white")
ggplot(hex.df) + aes(lat, long) + geom_polygon() + geom_path(color="white")
ggplot(hex.df) + aes(long, lat) + geom_polygon() + geom_path(color="white")
ggplot(hex.df) + aes(long, lat, fill=ZoneId) + geom_polygon() + geom_path(color="white")
ggplot(hex.df) + aes(long, lat, fill=ZoneID) + geom_polygon() + geom_path(color="white")
getwd()
setwd("/Users/samcomber/Documents/spatial_analysis/shp/hex")
list.files()
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "new_id")
hex_60.df <- plyr::join(hex_60.pts, hex_60@data, by = "new_id")
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60@data$new_id
hex_60.pts <- fortify(hex_60, region = "new_id")
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "new_id")
hex_60.df <- plyr::join(hex_60.pts, hex_60@data, by = "new_id")
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "id")
hex_60.df <- plyr::join(hex_60.pts, hex_60@data, by = "id")
ggplot(hex_60.df) +
aes(long,lat,group=group,fill=LEVEL3_NAM) +
geom_polygon()
ggplot(hex_60.df) +
aes(long,lat,group=group) +
geom_polygon()
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon()
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme(legend.position="none")
install.packages("cowplot")
library(cowplot)
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme(legend.position="none") + theme_classic()
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")
hex_60 <- readOGR(dsn = ".", layer = "hex_30")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "id")
hex_60.df <- plyr::join(hex_60.pts, hex_60@data, by = "id")
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")
ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
hex_30 <- readOGR(dsn = ".", layer = "hex_30")
hex_30@data$new_id <- row.names(hex_30@data)
hex_30.pts <- fortify(hex_30, region = "id")
hex_30.df <- plyr::join(hex_30.pts, hex_30@data, by = "id")
ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
```
ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")
hex_30.pts
head(hex_30.pts)
head(hex_30.df)
ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) + geom_path(color="white")
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) + geom_path(color="green")
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "id")
hex_60.df <- plyr::join(hex_60.pts, hex_30@data, by = "id")
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z060_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
head(hex_60.df)
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
hex_60 <- readOGR(dsn = ".", layer = "hex_10")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "id")
hex_60.df <- plyr::join(hex_60.pts, hex_30@data, by = "id")
head(hex_60.df)
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "id")
hex_60.df <- plyr::join(hex_60.pts, hex_30@data, by = "id")
head(hex_60.df)
hex_60 <- readOGR(dsn = ".", layer = "hex_60")
hex_60@data$new_id <- row.names(hex_60@data)
hex_60.pts <- fortify(hex_60, region = "id")
hex_60.df <- plyr::join(hex_60.pts, hex_60@data, by = "id")
head(hex_60.df)
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z060_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
b <- ggplot(hex_60.df) +
aes(long,lat,group=group, fill = z060_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
a<- ggplot(hex_30.df) +
aes(long,lat,group=group, fill = z030_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
plot_grid(a, b, labels=c("A", "B"), ncol = 2, nrow = 1)
hex_10 <- readOGR(dsn = ".", layer = "hex_10")
hex_10@data$new_id <- row.names(hex_10@data)
hex_10.pts <- fortify(hex_10, region = "id")
hex_10.df <- plyr::join(hex_10.pts, hex_10@data, by = "id")
c <- ggplot(hex_10.df) +
aes(long,lat,group=group, fill = z010_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
d <- ggplot(hex_100.df) +
hex_100 <- readOGR(dsn = ".", layer = "hex_100")
hex_100@data$new_id <- row.names(hex_100@data)
hex_100.pts <- fortify(hex_100, region = "id")
hex_100.df <- plyr::join(hex_100.pts, hex_100@data, by = "id")
d <- ggplot(hex_100.df) +
aes(long,lat,group=group, fill = z100_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()
plot_grid(a, b,c,d, labels=c("A", "B","C","D"), ncol = 2, nrow = 1)
plot_grid(a, b,c,d, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
plot_grid(c,a,b,d, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
lpool <- get_map("Liverpool")
lpool
ggmap(lpool)
ggmap("lpool")
lpool <- get_map("Liverpool")
ggmap(lpool)
ggmap(get_map("Liverpool", zoom=13))
library(downloader)
library(rgdal)
library(httr)
library(ggplot2)
library(ggmap)
library(sp)
library(maptools)
library(classInt)
library(RColorBrewer)
library(lme4)
library(merTools)
library(dplyr)
library(spatialEco)
library(cowplot)
ggmap(get_map("Liverpool", zoom=13))
ggmap(get_map("Liverpool",zoom=13,maptype = "roadmap"))
ggmap(ggmap::get_map("Liverpool",zoom=13,maptype = "roadmap"))
devtools::install_github("dkahle/ggmap")
devtools::install_github("hadley/ggplot2")
ggmap(get_map("Liverpool",zoom=13,maptype = "roadmap"))
plot_grid(c,a,b,d, labels=c("A", "B","C","D"), ncol = 2, nrow = 2)
