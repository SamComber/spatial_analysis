name=document[[9]]$location$street$name, month=document[[9]]$month,
outcome_status=document[[9]]$outcome_status$category)
d10 <- data.frame(category=document[[10]]$category,lat=document[[10]]$location$latitude,
lon=document[[10]]$location$longitude, id=document[[10]]$id,
name=document[[10]]$location$street$name, month=document[[10]]$month,
outcome_status=document[[10]]$outcome_status$category)
d11 <- data.frame(category=document[[11]]$category,lat=document[[11]]$location$latitude,
lon=document[[11]]$location$longitude, id=document[[11]]$id,
name=document[[11]]$location$street$name, month=document[[11]]$month,
outcome_status=document[[11]]$outcome_status$category)
d12 <- data.frame(category=document[[12]]$category,lat=document[[12]]$location$latitude,
lon=document[[12]]$location$longitude, id=document[[12]]$id,
name=document[[12]]$location$street$name, month=document[[12]]$month,
outcome_status=document[[12]]$outcome_status$category)
# rbind each month to master data.frame
document <- rbind(master, d1, d2, d3, d4, d5, d6, d7, d8, d9, d10, d11, d12)
# document <- rbind(master, d1, d2)
# take a sample from population
document <- document[sample(nrow(document), 45000),]
# convert factors to chr class
document <- rapply(document, as.character, classes="factor", how="replace")
# cast lat/lon columns to numeric data type
document$lat <- as.numeric(document$lat)
document$lon <- as.numeric(document$lon)
# convert data.frame to shapefile in rgdal
coordinates(document) <- ~lon+lat
proj4string(document) <- CRS("+init=epsg:4326") # WGS 84
# subsetting operations
document <- document[document$category == "violent-crime",]
# write once
writeOGR(document, "/Users/samcomber/Documents/spatial_analysis/shp/crimes",
"crimes", driver = "ESRI Shapefile")
crimes <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/crimes",
layer = "crimes")
crimes <- crimes[sample(nrow(crimes), 500), ]
crimes
nrow(crimes)
# read twitter shapefile
tweets <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/tweets",
layer = "tweets_mersey")
# alternate x and y for correct aggregation (oops)
lats <- tweets@coords[, 1]
lon <- tweets@coords[, 2]
tweets@coords[,1] <- lon
tweets@coords[,2] <- lats
tweets <- tweets[sample(nrow(tweets), 500), ]
# directory loop
folders <- dir("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# we have folders + file names and are in run1 directory
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/")
# create master dataframe to hold correlation coefficents
cors.scale.master <- data.frame()
# loop over aggregation folder - i.e. 10 regions, 20, 30
for (folder in folders) {
setwd(paste0("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1","/",folder))
# reread hex shapefile everytime we move folder
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
out <- data.frame()
files <- list.files(pattern = "*.zon")
# pick first iteration from each scale of aggregation
img <- read.csv(files[1])
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, img, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.scale.master <- rbind(cors.scale.master, cor.tc)
}
cors.scale.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z100")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
#
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z050")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
#
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z070")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z030")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z040")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z060")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
# we choose 20 regions to illustrate zoning problem
setwd("/Users/samcomber/Documents/spatial_analysis/shp/img_stud/run1/z070")
# get all 10 iterations of 20 regions
files.20 <- list.files(pattern = "*.zon")
cors.zone.master
# build master data.frame
cors.zone.master <- data.frame()
for (file in files.20) {
hex <- readOGR(dsn = "/Users/samcomber/Documents/spatial_analysis/shp/hex", layer = "hex_1_clip")
# read file to df
zon <- read.csv(file)
# join regions to hex shapefile on area id
hex@data$id <- as.numeric(hex@data$id)
hex@data <- left_join(hex@data, zon, by = c("id"= "AreaID"))
hex@data <- hex@data[order(hex@data$id),]
# dissolve by area id
tes <- unionSpatialPolygons(hex, hex@data$ZoneID)
# convert spatial polygons to spatialpolygonsdataframe
oldw <- getOption("warn")
# silence irrelevant warnings
options(warn = -1)
df <- data.frame(id = getSpPPolygonsIDSlots(tes))
row.names(df) <- getSpPPolygonsIDSlots(tes)
options(warn = oldw)
spdf <- SpatialPolygonsDataFrame(tes, data = df)
# points in polygon spatial join
pts.crimes <- point.in.poly(crimes, spdf)
pts.tweets <- point.in.poly(tweets, spdf)
# aggregate crimes/tweets data
pts.agg.crimes <- pts.crimes@data %>% group_by(id.1) %>% summarise(num = n()) %>% arrange(id.1)
pts.agg.tweets <- pts.tweets@data %>% group_by(id) %>% summarise(num = n()) %>% arrange(id)
# cast ids as factors for left_join
pts.agg.crimes$id.1 <- as.integer(pts.agg.crimes$id.1)
pts.agg.tweets$id <- as.integer(pts.agg.tweets$id)
# join summed crimes/tweets back to data.frame
hex@data <- left_join(hex@data, pts.agg.tweets, by = c("ZoneID" = "id"))
hex@data <- left_join(hex@data, pts.agg.crimes, by = c("ZoneID" = "id.1"))
# correlate unique zone id sums
uniques <- hex@data[!duplicated(hex@data$num.x), ]
cor.tc <- cor(uniques$num.x, uniques$num.y, use="complete.obs")
# rbind to master frame
cors.zone.master <- rbind(cors.zone.master, cor.tc)
}
cors.zone.master
hex_01 <- readOGR(".", "hex_01")
hex_01 <- readOGR(dsn=".", layer="hex_01")
getwd()
setwd("../hex")
setwd(""/Users/samcomber/Documents/spatial_analysis/shp/hex"")
setwd("/Users/samcomber/Documents/spatial_analysis/shp/hex")
hex_01 <- readOGR(dsn=".", layer="hex_01")
hex_01.pts <- fortify(hex_10, id="id")
hex_10.df <- plyr::join(hex_01.pts, hex_01@data, by = "id")
a <- ggplot(hex_10.df) +
aes(long,lat,group=group, fill = z070_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
a
hex_01 <- readOGR(dsn=".", layer="hex_02")
hex_01.pts <- fortify(hex_10, id="id")
hex_01.df <- plyr::join(hex_01.pts, hex_01@data, by = "id")
a <- ggplot(hex_01.df) +
aes(long,lat,group=group, fill = z070_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
hex_01 <- readOGR(dsn=".", layer="hex_01")
hex_01.pts <- fortify(hex_01, id="id")
hex_01.df <- plyr::join(hex_01.pts, hex_01@data, by = "id")
a <- ggplot(hex_01.df) +
aes(long,lat,group=group, fill = z070_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
a
hex_04 <- readOGR(dsn=".", layer="hex_04")
hex_04.pts <- fortify(hex_04, id="id")
hex_04.df <- plyr::join(hex_04.pts, hex_04@data, by = "id")
d <- ggplot(hex_04.df) +
aes(long,lat,group=group, fill = z070_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
d
hex_04 <- readOGR(dsn=".", layer="hex_04")
hex_04.pts <- fortify(hex_04, id="id")
hex_04.df <- plyr::join(hex_04.pts, hex_04@data, by = "id")
d <- ggplot(hex_04.df) +
aes(long,lat,group=group, fill = z070_i04_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
d
hex_01 <- readOGR(dsn=".", layer="hex_01")
hex_01.pts <- fortify(hex_01, id="id")
hex_01.df <- plyr::join(hex_01.pts, hex_01@data, by = "id")
a <- ggplot(hex_01.df) +
aes(long,lat,group=group, fill = z070_i01_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
hex_02 <- readOGR(dsn=".", layer="hex_02")
hex_02.pts <- fortify(hex_02, id="id")
hex_02.df <- plyr::join(hex_02.pts, hex_02@data, by = "id")
b <- ggplot(hex_02.df) +
aes(long,lat,group=group, fill = z070_i02_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
hex_03 <- readOGR(dsn=".", layer="hex_03")
hex_03.pts <- fortify(hex_03, id="id")
hex_03.df <- plyr::join(hex_03.pts, hex_03@data, by = "id")
c <- ggplot(hex_03.df) +
aes(long,lat,group=group, fill = z070_i03_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
hex_04 <- readOGR(dsn=".", layer="hex_04")
hex_04.pts <- fortify(hex_04, id="id")
hex_04.df <- plyr::join(hex_04.pts, hex_04@data, by = "id")
d <- ggplot(hex_04.df) +
aes(long,lat,group=group, fill = z070_i04_Z) +
geom_polygon() + theme_classic() + theme(legend.position="none")+ coord_equal()+xlab("Longitude") +ylab("Latitude")
cowplot::plot_grid(a,b,c,d, nrow=2, ncol=2)
cowplot::plot_grid(a,b,c,d, labels = ("A", "B", "C", "D") nrow=2, ncol=2)
cowplot::plot_grid(a,b,c,d, labels = ("A", "B", "C", "D"), nrow=2, ncol=2)
cowplot::plot_grid(a,b,c,d, labels = c("A", "B", "C", "D"), nrow=2, ncol=2)
cors.zone.master
cors.zone.master
range(cors.zone.master$X0.890223778939045)
0.9592308 - 0.4201750
cors.scale.master
range(cors.zone.master$X0.890223778939045)
a <- range(cors.zone.master$X0.890223778939045)
a
a[1]
a[2] - a[1]
a <- range(cors.zone.master$X0.890223778939045)
cors.scale.master
b <- range(cors.scale.master$X0.837458936985635)
b[2] = b[1]
b <- range(cors.scale.master$X0.837458936985635)
b[2] - b[1]
cors.scale.master
getwd()
setwd("/Users/samcomber/Document/spatial_analysis/shp/spatial_join")
setwd("/Users/samcomber/Documents/spatial_analysis/shp/spatial_join")
lsoa.join <- readOGR(".", layer = "lsoa_join")
plot(lsoa.join)
lsoa.join@data
getwd()
setwd("/Users/samcomber/Documents/spatial_analysis/data")
?read.csv
lr <- read.csv("lpool_pp.csv", header = TRUE)
head(lr)
nrow(lr)
coordinates(lr) <- ~lat+lon
coordinates(lr) <- ~lon + lat
lr
lr <- read.csv("lpool_pp.csv", header = TRUE)
lr <- read.csv("lpool_pp.csv", header = TRUE, sep=",")
lr <- read.csv("lpool_pp.csv", header = TRUE, sep=",")
lr
lr <- read.csv("lpool_pp.csv", header = TRUE, sep=",")
coordinates(lr) <- ~lon + lat
nrow(lr)
d <- "d"
